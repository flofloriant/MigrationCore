// <auto-generated />
using System;
using Apogee.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Apogee.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210316121213_[AjoutBdd]")]
    partial class AjoutBdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Apogee.Models.Affect_Utilisateur_Agence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("fk_id_agence")
                        .HasColumnName("fk_id_agence")
                        .HasColumnType("int");

                    b.Property<int>("fk_id_utilisateur")
                        .HasColumnName("fk_id_utilisateur")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Affect_Utilisateur_Agence");
                });

            modelBuilder.Entity("Apogee.Models.Agence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code_pays")
                        .IsRequired()
                        .HasColumnName("code_pays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agence");
                });

            modelBuilder.Entity("Apogee.Models.Coefficient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FK_id_niveau")
                        .HasColumnName("FK_id_niveau")
                        .HasColumnType("int");

                    b.Property<string>("Valeur")
                        .IsRequired()
                        .HasColumnName("valeur")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coefficient");
                });

            modelBuilder.Entity("Apogee.Models.Collaborateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Abilite_defense")
                        .HasColumnName("abilite_defense")
                        .HasColumnType("bit");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnName("adresse")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Archive")
                        .HasColumnName("archive")
                        .HasColumnType("bit");

                    b.Property<int>("Charge")
                        .HasColumnName("charge")
                        .HasColumnType("int");

                    b.Property<int>("Civilite")
                        .HasColumnName("civilite")
                        .HasColumnType("int");

                    b.Property<string>("Code_postal")
                        .IsRequired()
                        .HasColumnName("code_postal")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Date_embauche")
                        .HasColumnName("date_embauche")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date_fin_contrat")
                        .HasColumnName("date_fin_contrat")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date_fin_mission")
                        .HasColumnName("date_fin_mission")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_naissance")
                        .HasColumnName("date_naissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email_travail")
                        .IsRequired()
                        .HasColumnName("email_travail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("FK_id_agence")
                        .HasColumnName("FK_id_agence")
                        .HasColumnType("int");

                    b.Property<int>("FK_id_coefficient")
                        .HasColumnName("FK_id_coefficient")
                        .HasColumnType("int");

                    b.Property<int>("FK_id_commercial")
                        .HasColumnName("FK_id_commercial")
                        .HasColumnType("int");

                    b.Property<int>("FK_id_contrat")
                        .HasColumnName("FK_id_contrat")
                        .HasColumnType("int");

                    b.Property<int>("FK_id_niveau")
                        .HasColumnName("FK_id_niveau")
                        .HasColumnType("int");

                    b.Property<int>("FK_id_statut")
                        .HasColumnName("FK_id_statut")
                        .HasColumnType("int");

                    b.Property<string>("Fic_autorisation_photo")
                        .HasColumnName("fic_autorisation_photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fic_photo")
                        .HasColumnName("fic_photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Matricule")
                        .HasColumnName("matricule")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnName("pays")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnName("prenom")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Salaire_bru_ann")
                        .HasColumnName("salaire_bru_ann")
                        .HasColumnType("float");

                    b.Property<double>("Salaire_brut_mens")
                        .HasColumnName("salaire_brut_mens")
                        .HasColumnType("float");

                    b.Property<int>("Suffixe_homonyme")
                        .HasColumnName("suffixe_homonyme")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnName("tel")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Tel_travail")
                        .IsRequired()
                        .HasColumnName("tel_travail")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnName("ville")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Collaborateur");
                });

            modelBuilder.Entity("Apogee.Models.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Certificat")
                        .HasColumnName("fic_certificat")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<int>("IdCollab")
                        .HasColumnName("FK_id_collaborateur")
                        .HasColumnType("int");

                    b.Property<int>("Niveau")
                        .HasColumnName("niveau")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("IdCollab");

                    b.ToTable("Competence");
                });

            modelBuilder.Entity("Apogee.Models.Contrat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code_pays")
                        .IsRequired()
                        .HasColumnName("code_pays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contrat");
                });

            modelBuilder.Entity("Apogee.Models.Etude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date_debut")
                        .HasColumnName("date_debut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_fin")
                        .HasColumnName("date_fin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diplome")
                        .HasColumnName("fic_diplome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domaine")
                        .HasColumnName("domaine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Etablissement")
                        .IsRequired()
                        .HasColumnName("etablissement")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("IdCollab")
                        .HasColumnName("FK_id_collaborateur")
                        .HasColumnType("int");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasColumnName("intitule")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Ville")
                        .HasColumnName("ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Etude");
                });

            modelBuilder.Entity("Apogee.Models.Formation", b =>
                {
                    b.Property<int>("Num_demande")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("num_demande")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Certification")
                        .HasColumnName("certification")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date_acceptation")
                        .HasColumnName("date_acceptation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_debut")
                        .HasColumnName("date_debut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_demande")
                        .HasColumnName("date_demande")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_fin")
                        .HasColumnName("date_fin")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_id_collaborateur")
                        .HasColumnName("FK_id_collaborateur")
                        .HasColumnType("int");

                    b.Property<int>("FK_id_statut")
                        .HasColumnName("FK_id_statut")
                        .HasColumnType("int");

                    b.Property<string>("Fic_certification")
                        .HasColumnName("fic_certification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fic_devis")
                        .HasColumnName("fic_devis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intitule")
                        .HasColumnName("intitule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organisme")
                        .HasColumnName("organisme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Validation")
                        .HasColumnName("validation")
                        .HasColumnType("bit");

                    b.HasKey("Num_demande");

                    b.ToTable("Formation");
                });

            modelBuilder.Entity("Apogee.Models.Niveau", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code_pays")
                        .IsRequired()
                        .HasColumnName("code_pays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Valeur")
                        .IsRequired()
                        .HasColumnName("valeur")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Niveau");
                });

            modelBuilder.Entity("Apogee.Models.Poste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Charge")
                        .HasColumnName("charge")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date_debut")
                        .HasColumnName("date_debut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_fin")
                        .HasColumnName("date_fin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domaine")
                        .IsRequired()
                        .HasColumnName("domaine")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("FK_id_collaborateur")
                        .HasColumnName("FK_id_collaborateur")
                        .HasColumnType("int");

                    b.Property<string>("Intitule")
                        .IsRequired()
                        .HasColumnName("intitule")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Logo")
                        .HasColumnName("logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom_client")
                        .IsRequired()
                        .HasColumnName("nom_client")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnName("pays")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnName("ville")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Poste");
                });

            modelBuilder.Entity("Apogee.Models.Statut_Contrat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code_pays")
                        .IsRequired()
                        .HasColumnName("code_pays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statut_Contrat");
                });

            modelBuilder.Entity("Apogee.Models.Urgence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnName("adresse")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("FK_id_collaborateur")
                        .HasColumnName("FK_id_collaborateur")
                        .HasColumnType("int");

                    b.Property<string>("Lien")
                        .IsRequired()
                        .HasColumnName("lien")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnName("prenom")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Tel_fixe")
                        .IsRequired()
                        .HasColumnName("tel_fixe")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Tel_port")
                        .IsRequired()
                        .HasColumnName("tel_port")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Tel_travail")
                        .HasColumnName("tel_travail")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Urgence");
                });

            modelBuilder.Entity("Apogee.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompteurMDPFaux")
                        .HasColumnName("compteur_mdp_faux")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateBloquage")
                        .HasColumnName("date_bloquage")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnName("mot_de_passe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnName("prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profil")
                        .HasColumnName("profil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValiditeMDP")
                        .HasColumnName("validite_mdp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Utilisateur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Apogee.Models.Competence", b =>
                {
                    b.HasOne("Apogee.Models.Collaborateur", "Collaborateur")
                        .WithMany()
                        .HasForeignKey("IdCollab")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
